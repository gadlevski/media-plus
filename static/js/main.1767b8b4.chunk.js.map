{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["box","id","name","App","useState","startAnimation","setStartAnimation","showStartNotice","setShowStartNotice","showEndNotice","setShowEndNotice","notices","setNotices","AnimationStartHandler","event","target","innerText","AnimationEndHandler","useEffect","length","alert","className","map","item","index","style","animationDelay","onAnimationStart","onAnimationEnd","notice","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAIMA,EAAM,CACV,CAAEC,GAAI,EAAGC,KAAM,KACf,CAAED,GAAI,EAAGC,KAAM,KACf,CAAED,GAAI,EAAGC,KAAM,KACf,CAAED,GAAI,EAAGC,KAAM,KACf,CAAED,GAAI,EAAGC,KAAM,KACf,CAAED,GAAI,EAAGC,KAAM,KACf,CAAED,GAAI,EAAGC,KAAM,KACf,CAAED,GAAI,EAAGC,KAAM,MAwEFC,MArEf,WACE,MAA4CC,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA8CF,oBAAS,GAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAOMC,EAAwB,SAACC,GAC7BF,EAAW,GAAD,mBACLD,GADK,gBAEAG,EAAMC,OAAOC,UAFb,wBAMNC,EAAsB,SAACH,GAC3BF,EAAW,GAAD,mBACLD,GADK,gBAEAG,EAAMC,OAAOC,UAFb,sBAaZ,OAPAE,qBAAU,WACJP,EAAQQ,SAAwB,EAAbnB,EAAImB,SACzBT,GAAiB,GACjBU,MAAM,cAEP,CAACT,IAGF,qCACE,qBAAKU,UAAU,YAAf,SACE,qBAAKA,UAAU,mBAAf,SACGrB,EAAIsB,KAAI,SAACC,EAAMC,GAAP,OACP,qBAEEH,UAAWhB,EAAiB,aAAe,MAC3CoB,MAAO,CAAEC,eAAe,GAAD,OAAa,IAARF,EAAL,OACvBG,iBAAkBd,EAClBe,eAAgBX,EALlB,SAOGM,EAAKrB,MANDqB,EAAKtB,WAYlB,qBAAKoB,UAAU,eAAf,SACE,sBAAKA,UAAU,sBAAf,UACGd,GAAmB,iBAEnBI,EAAQW,KAAI,SAACO,EAAQL,GAAT,OACX,8BAAkBK,GAARL,MAGXf,GAAiB,oBAItB,wBAAQqB,QAxDe,WACzBtB,GAAmB,GACnBF,GAAkB,IAsDqBe,UAAU,YAA/C,SACGhB,EAAiB,cAAgB,cClE3B0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1767b8b4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport './App.css';\n\nconst box = [\n  { id: 1, name: '1' },\n  { id: 2, name: '2' },\n  { id: 3, name: '3' },\n  { id: 4, name: '4' },\n  { id: 5, name: '5' },\n  { id: 6, name: '6' },\n  { id: 7, name: '7' },\n  { id: 8, name: '8' },\n];\n\nfunction App() {\n  const [startAnimation, setStartAnimation] = useState(false);\n  const [showStartNotice, setShowStartNotice] = useState(false);\n  const [showEndNotice, setShowEndNotice] = useState(false);\n  const [notices, setNotices] = useState([]);\n\n  const changeClassHandler = () => {\n    setShowStartNotice(true);\n    setStartAnimation(true);\n  };\n\n  const AnimationStartHandler = (event) => {\n    setNotices([\n      ...notices,\n      `Cell ${event.target.innerText} animation start`,\n    ]);\n  };\n\n  const AnimationEndHandler = (event) => {\n    setNotices([\n      ...notices,\n      `Cell ${event.target.innerText} animation end`,\n    ]);\n  };\n\n  useEffect(() => {\n    if (notices.length === box.length * 2) {\n      setShowEndNotice(true);\n      alert('success');\n    }\n  }, [notices]);\n\n  return (\n    <>\n      <div className='block-top'>\n        <div className='block-top__inner'>\n          {box.map((item, index) => (\n            <div\n              key={item.id}\n              className={startAnimation ? 'box active' : 'box'}\n              style={{ animationDelay: `${index * 300}ms` }}\n              onAnimationStart={AnimationStartHandler}\n              onAnimationEnd={AnimationEndHandler}\n            >\n              {item.name}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className='block-bottom'>\n        <div className='block-bottom__inner'>\n          {showStartNotice && 'Progress Start'}\n\n          {notices.map((notice, index) => (\n            <div key={index}>{notice}</div>\n          ))}\n\n          {showEndNotice && 'Progress End'}\n        </div>\n      </div>\n\n      <button onClick={changeClassHandler} className='btn-start'>\n        {startAnimation ? 'In progress' : 'Start'}\n      </button>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}